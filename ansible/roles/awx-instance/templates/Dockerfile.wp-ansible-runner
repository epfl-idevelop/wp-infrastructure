#canary201215.0809

FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ wp_base_image_name }}:latest
FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ awx_runner_base_image_name }}:latest

RUN yum -y update

RUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

RUN yum -y install http://rpms.remirepo.net/enterprise/remi-release-8.rpm

RUN dnf module enable php:remi-7.4 -y

RUN yum -y install yum-plugin-copr && yum -y copr enable copart/restic



#zzz201109.1441
#RUN yum -y install php-cli php-mysql python3 restic jq mysql
RUN yum -y install php-cli php-mysql python3 restic jq mysql php-opcache git
#zzz



#zzz201007.164411
RUN mkdir /runner/.opcache;                                                     \
    chmod 777 /runner/.opcache;                                                 \
    ( echo 'zend_extension=/usr/lib64/php/modules/opcache.so';                  \
      echo 'opcache.enable=1';                                                  \
      echo 'opcache.memory_consumption=128';                                    \
      echo 'opcache.interned_strings_buffer=32';                                \
      echo 'opcache.max_accelerated_files=3000';                                \
      echo 'opcache.revalidate_freq=600';                                       \
      echo 'opcache.fast_shutdown=0';                                           \
      echo 'opcache.enable_cli=1';                                              \
      echo 'opcache.revalidate_path=0';                                         \
      echo 'opcache.validate_timestamps=1';                                     \
      echo 'opcache.max_file_size=0';                                           \
      echo 'opcache.file_cache=/runner/.opcache';                               \
      echo 'opcache.file_cache_only=1';)                                        \
    > /etc/php.d/10-opcache.ini
RUN echo "opcache install canary201028.1530" >> /canary.txt
#zzz



# #zzz201111.1431
# # https://docs.ansible.com/ansible/2.9/plugins/strategy.html
# # linear
# # free
# # host_pinned
# RUN mkdir /etc/ansible;                                                         \
#     ( echo '[defaults]';                                                        \
#       echo 'strategy=host_pinned')                                         \
#     > /etc/ansible/ansible.cfg
# RUN echo "ansible strategy_plugins canary201112.1004" >> /canary.txt
# #zzz



# #zzz201109.1054
# # mitogen_free
# # mitogen_host_pinned
# # mitogen_linear
# RUN pip3 install mitogen==0.2.9
# RUN mkdir /etc/ansible;                                                         \
#     ( echo '[defaults]';                                                        \
#       echo 'strategy_plugins = /usr/local/lib/python3.6/site-packages/ansible_mitogen/plugins/strategy'; \
#       echo 'strategy = mitogen_linear')                                         \
#     > /etc/ansible/ansible.cfg
# RUN echo "mitogen 0.2.9 install canary201111.1046" >> /canary.txt
# #zzz

    

# #zzz201109.1436
# # mitogen_free
# # mitogen_host_pinned
# # mitogen_linear
# RUN git clone https://github.com/dw/mitogen.git
# RUN mkdir /etc/ansible;                                                         \
#     ( echo '[defaults]';                                                        \
# #      echo 'strategy_plugins = /usr/local/lib/python3.6/site-packages/ansible_mitogen/plugins/strategy'; \
#       echo 'strategy_plugins = /runner/mitogen/ansible_mitogen/plugins/strategy'; \
#       echo 'strategy = mitogen_linear')                                         \
#     > /etc/ansible/ansible.cfg
# RUN echo "mitogen latest install canary201109.1550" >> /canary.txt
# #zzz


# installation mitogen compatible VPSI    
RUN pip3 install mitogen==0.2.9
RUN mkdir /etc/ansible;                                                         \
( echo '[defaults]';                                                        \
echo 'strategy_plugins = /usr/local/lib/python3.6/site-packages/ansible_mitogen/plugins/strategy') \
> /etc/ansible/ansible.cfg
RUN echo "mitogen vpsi install canary201124.0959" >> /canary.txt


RUN pip3 install awscli

ARG RUNNER_PATCH_URLS=""
ARG ANSIBLE_PATCH_URLS=""
RUN set -e -x; yum -y install patch;                                        \
    for url in $RUNNER_PATCH_URLS; do                                       \
        curl $url |                                                         \
            patch -d /usr/lib/python3.6/site-packages/ansible_runner;       \
    done;                                                                   \
    for url in $ANSIBLE_PATCH_URLS; do                                      \
        curl $url |                                                         \
            patch -d /usr/local/lib/python3.6/site-packages/ansible -p3 ;   \
    done;                                                                   \
    yum -y history undo patch



#zzz201124.1206
# installation des packages manquants
RUN yum -y install htop nano tree git

#zzz200513.1602
# Permet de devenir root avec la commande sudo
RUN echo "www-data ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
RUN echo "add sudoer canary201006.172533" >> /canary.txt


#zzz200518.1534
# Installation de la sonde Telegraf
RUN git clone https://github.com/zuzu59/telegraf.git && \
export dbflux_srv_host={{ lookup('env','dbflux_srv_host') }} && \
export dbflux_srv_port={{ lookup('env','dbflux_srv_port') }} && \
export dbflux_u_user={{ lookup('env','dbflux_u_user') }} && \
export dbflux_p_user={{ lookup('env','dbflux_p_user') }} && \
/runner/telegraf/install_docker_centos_runner.sh

#zzz200519.1136
# Lance Telegraf au dÃ©marrage du container
RUN sed -i '$ i\/runner/telegraf/start_docker.sh' /usr/bin/entrypoint

#zzz200723.1129
RUN echo "telegraf install canary201117.0906" >> /canary.txt
#zzz


#zzz201124.0718
# Installation de la sonde nfs-smoke-test
RUN git clone https://github.com/zuzu59/nfs-smoke-test.git && \
  chmod -R 777 /runner/nfs-smoke-test && \
  echo "nfs-smoke-test install canary201124.0717" >> /canary.txt
#zzz


COPY --from=0 /usr/local/bin/wp /usr/local/bin/
RUN mkdir /runner/.wp-cli
COPY --from=0 /var/www/.wp-cli /runner/.wp-cli
COPY --from=0 /wp /wp




#zzz201214.1537
# Installation de la sonde wp-cli
RUN ( echo '#!/usr/bin/env bash';                                   \
      echo 'date >> /srv/zuzu-wp-cli.txt';                          \
      echo 'exec wp-cli-php "$@"')                                         \
    > /usr/local/bin/wp-cli-zf.sh;                                  \
    chmod +x /usr/local/bin/wp-cli-zf.sh;                           \
    mv /usr/local/bin/wp /usr/local/bin/wp-cli-php;                 \
    mv /usr/local/bin/wp-cli-zf.sh /usr/local/bin/wp    
RUN echo "sonde wp-cli canary201215.1503" >> /canary.txt
#zzz



# We want to run as the credentials we have been using
# historically in the mgmt image, and are therefore still in use
# e.g. for file ownership on NFS.
RUN groupdel $(getent group {{ awx_unix_credentials.uid }} |cut -d: -f1)
RUN groupadd -g {{ awx_unix_credentials.gid }} {{ awx_unix_credentials.group }}
RUN useradd -u {{ awx_unix_credentials.uid }} -g {{ awx_unix_credentials.gid }} -d /runner {{ awx_unix_credentials.user }}
RUN chgrp -R {{ awx_unix_credentials.group }} /runner

# Add dependencies
RUN set -e -x; mkdir /tmp/install; \
    curl -o /tmp/install/requirements.yml https://raw.githubusercontent.com/epfl-si/wp-ops/{{ git_current_branch }}/ansible/requirements.yml ; \
    ansible-galaxy install -i -r /tmp/install/requirements.yml ; \
    ansible-galaxy collection install -i -r /tmp/install/requirements.yml ; \
    rm /tmp/install/requirements.yml

# Activate cache in wordpress_plugin.py
ENV WPSIBLE_WPCLI_CACHE_DIR=/tmp/wordpress_plugin-cache
