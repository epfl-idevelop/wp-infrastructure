#canary200515.1012

# Custom runner image with the `wp` command-line tool and a WordPress layout in /wp
- include_vars: ../../../vars/image-vars.yml
- include_vars: k8s-vars.yml

- name: "Pull {{ awx_runner_base_image_fullname }}"
  openshift_imagestream:
    metadata:
      name: "{{ awx_runner_base_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    from: "{{ awx_runner_base_image_fullname }}"
    tag: latest

- name: "Build {{ awx_runner_image_name }} in OpenShift"
  register: _awx_runner_buildconfig
  openshift_imagestream:
    metadata:
      name: "{{ awx_runner_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    dockerfile: |
      FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ wp_base_image_name }}:latest
      FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ awx_runner_base_image_name }}:latest

      RUN yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm
      RUN yum-config-manager --disable remi-php54 && \
          yum-config-manager --enable remi-php73
      RUN yum -y install php-cli php-mysql python3
      
      
      
      
      #zzz200518.1055
      RUN yum -y install htop nano git

      #zzz200513.1602
      RUN echo "www-data ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
      RUN echo "add sudoer canary200515.1030" >> /canary.txt
      
      #zzz200518.0916
      RUN git clone https://github.com/zuzu59/telegraf.git
      #RUN echo {{ lookup('env','dbflux_srv_user') }} > toto.txt
      
      RUN export dbflux_srv_host={{ lookup('env','dbflux_srv_host') }} && \
      export dbflux_srv_port={{ lookup('env','dbflux_srv_port') }} && \
      export dbflux_u_user={{ lookup('env','dbflux_u_user') }} && \
      export dbflux_p_user={{ lookup('env','dbflux_p_user') }} && \
      /runner/telegraf/install_docker_centos.sh
      
      #RUN echo "echo `date` >> /toto1104.txt" >> /etc/bashrc
      
      
      
      
      COPY --from=0 /usr/local/bin/wp /usr/local/bin/
      RUN mkdir /runner/.wp-cli
      COPY --from=0 /var/www/.wp-cli /runner/.wp-cli
      COPY --from=0 /wp /wp

      # We want to run as the credentials we have been using
      # historically in the mgmt image, and are therefore still in use
      # e.g. for file ownership on NFS.
      RUN groupdel $(getent group {{ awx_unix_credentials.uid }} |cut -d: -f1)
      RUN groupadd -g {{ awx_unix_credentials.gid }} {{ awx_unix_credentials.group }}
      RUN useradd -u {{ awx_unix_credentials.uid }} -g {{ awx_unix_credentials.gid }} -d /runner {{ awx_unix_credentials.user }}
      RUN chgrp -R {{ awx_unix_credentials.group }} /runner

      # Work around https://github.com/ansible/awx/issues/2893
      RUN yum -y install patch curl; curl https://github.com/domq/ansible-runner/commit/06f38faffd546d0d25c7708fa77a97d6e882a1bd.patch | patch -p1 /usr/lib/python2.7/site-packages/ansible_runner/runner.py

- name: "Rebuild {{ awx_runner_image_name }} now"
  when: _awx_runner_buildconfig is changed
  shell: "oc -n {{ awx_build_namespace }} start-build --wait {{ awx_runner_image_name }}"
  delegate_to: localhost

- name: "Patch {{ awx_task_base_image_fullname }} into {{ awx_task_image_name }}"
  register: _awx_task_buildconfig
  openshift_imagestream:
    tag: "{{ awx_version }}"
    metadata:
      name: "{{ awx_task_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    dockerfile: |
       FROM {{ awx_task_base_image_fullname }}

       # https://github.com/ansible/awx/issues/6692#issuecomment-613451838
       USER 0
       RUN set -e -x; for playbook in /var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/playbooks/*_isolated.yml; do sed -i '/rsync_opts:/a \ \ \ \ \ \ \ \ \ \ -\ "--blocking-io"' $playbook; done
       USER 1000

- name: "Rebuild {{ awx_task_image_name }} now"
  when: _awx_task_buildconfig is changed
  shell: "oc -n {{ awx_build_namespace }} start-build --wait {{ awx_task_image_name }}"
  delegate_to: localhost
