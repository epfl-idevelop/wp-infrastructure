#canary200723.1542

# Custom runner image with the `wp` command-line tool and a WordPress layout in /wp
- include_vars: ../../../vars/image-vars.yml
- include_vars: k8s-vars.yml

- name: "Pull {{ awx_runner_base_image_fullname }}"
  delegate_to: localhost
  openshift_imagestream:
    metadata:
      name: "{{ awx_runner_base_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    from: "{{ awx_runner_base_image_fullname }}"
    tag: latest

- name: "Build {{ awx_runner_image_name }} in OpenShift"
  delegate_to: localhost
  register: _awx_runner_buildconfig
  openshift_imagestream:
    metadata:
      name: "{{ awx_runner_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    dockerfile: |
      FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ wp_base_image_name }}:latest
      FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ awx_runner_base_image_name }}:latest

      RUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

      RUN yum -y install http://rpms.remirepo.net/enterprise/remi-release-8.rpm

      RUN dnf module enable php:remi-7.4 -y

      RUN yum -y install php-cli php-mysql python3
      
      ARG RUNNER_PATCH_URLS="https://patch-diff.githubusercontent.com/raw/ansible/ansible-runner/pull/445.patch"
      ARG ANSIBLE_PATCH_URLS="https://patch-diff.githubusercontent.com/raw/epfl-si/ansible/pull/1.patch"
      RUN set -e -x; yum -y install patch;                                        \
          for url in $RUNNER_PATCH_URLS; do                                       \
              curl $url |                                                         \
                  patch -d /usr/lib/python3.6/site-packages/ansible_runner;       \
          done;                                                                   \
          for url in $ANSIBLE_PATCH_URLS; do                                      \
              curl $url |                                                         \
                  patch -d /usr/local/lib/python3.6/site-packages/ansible -p3 ;   \
          done;                                                                   \
          yum -y history undo patch

      #zzz200518.1055
      # installation des packages manquants
      RUN yum -y install htop nano git

      #zzz200513.1602
      # Permet de devenir root avec la commande sudo
      RUN echo "www-data ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
      RUN echo "add sudoer canary200515.1030" >> /canary.txt
      
      # #zzz200518.1534
      # # Installation de la sonde Telegraf
      # RUN git clone https://github.com/zuzu59/telegraf.git && \
      # export dbflux_srv_host={{ lookup('env','dbflux_srv_host') }} && \
      # export dbflux_srv_port={{ lookup('env','dbflux_srv_port') }} && \
      # export dbflux_u_user={{ lookup('env','dbflux_u_user') }} && \
      # export dbflux_p_user={{ lookup('env','dbflux_p_user') }} && \
      # /runner/telegraf/install_docker_centos.sh
      # 
      # #zzz200519.1136
      # # Lance Telegraf au démarrage du container
      # RUN sed -i '$ i\/runner/telegraf/start_docker.sh' /usr/bin/entrypoint
      # 
      # #zzz200723.1129
      # RUN echo "telegraf install canary200723.1128" >> /canary.txt
      #zzz200723.1129


      ARG RUNNER_PATCH_URLS=""
      ARG ANSIBLE_PATCH_URLS=""
      RUN set -e -x; yum -y install patch;                                        \
          for url in $RUNNER_PATCH_URLS; do                                       \
              curl $url |                                                         \
                  patch -d /usr/lib/python3.6/site-packages/ansible_runner;       \
          done;                                                                   \
          for url in $ANSIBLE_PATCH_URLS; do                                      \
              curl $url |                                                         \
                  patch -d /usr/local/lib/python3.6/site-packages/ansible -p3 ;   \
          done;                                                                   \
          yum -y history undo patch

      COPY --from=0 /usr/local/bin/wp /usr/local/bin/
      RUN mkdir /runner/.wp-cli
      COPY --from=0 /var/www/.wp-cli /runner/.wp-cli
      COPY --from=0 /wp /wp

      # We want to run as the credentials we have been using
      # historically in the mgmt image, and are therefore still in use
      # e.g. for file ownership on NFS.
      RUN groupdel $(getent group {{ awx_unix_credentials.uid }} |cut -d: -f1)
      RUN groupadd -g {{ awx_unix_credentials.gid }} {{ awx_unix_credentials.group }}
      RUN useradd -u {{ awx_unix_credentials.uid }} -g {{ awx_unix_credentials.gid }} -d /runner {{ awx_unix_credentials.user }}
      RUN chgrp -R {{ awx_unix_credentials.group }} /runner

- name: "Rebuild {{ awx_runner_image_name }} now"
  when: _awx_runner_buildconfig is changed
  shell: "oc -n {{ awx_build_namespace }} start-build --wait {{ awx_runner_image_name }}"
  delegate_to: localhost

- name: "Patch {{ awx_task_base_image_fullname }} into {{ awx_task_image_name }}"
  register: _awx_task_buildconfig
  delegate_to: localhost
  openshift_imagestream:
    tag: "{{ awx_version }}"
    metadata:
      name: "{{ awx_task_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    dockerfile: |
       FROM {{ awx_task_base_image_fullname }}

       # https://github.com/ansible/awx/issues/6692#issuecomment-613451838
       USER 0
       RUN set -e -x; for playbook in /var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/playbooks/*_isolated.yml; do sed -i '/rsync_opts:/a \ \ \ \ \ \ \ \ \ \ -\ "--blocking-io"' $playbook; done
       USER 1000

- name: "Rebuild {{ awx_task_image_name }} now"
  when: _awx_task_buildconfig is changed
  shell: "oc -n {{ awx_build_namespace }} start-build --wait {{ awx_task_image_name }}"
  delegate_to: localhost

############# Temporaire (?) - Bidouillage de l'image awx_web

- name: "Pull {{ awx_web_base_image_fullname }}"
  delegate_to: localhost
  openshift_imagestream:
    metadata:
      name: "{{ awx_web_base_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    from: "{{ awx_web_base_image_fullname }}"
    tag: latest

- name: "Build {{ awx_web_image_name }} in OpenShift"
  register: _awx_web_buildconfig
  delegate_to: localhost
  openshift_imagestream:
    tag: "{{ awx_version }}"
    metadata:
      name: "{{ awx_web_image_name }}"
      namespace: "{{ ansible_oc_namespace }}"
    dockerfile: |
      FROM docker-registry.default.svc:5000/{{ ansible_oc_namespace }}/{{ awx_web_base_image_name }}:latest
      
      #zzz200716.1427
      # Modifie les autorisations pour le debug de python
      USER 0
      RUN id; chmod -R g+w /var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ || true
      
      #zzz200716.1427
      RUN echo "chmod -R Python canary200723.1128" >> /canary.txt

      #zzz200716.1427
      # installation des packages manquants
      RUN yum -y install htop nano git
      
      #zzz200716.1427
      # Installation de la sonde Telegraf
      RUN git clone https://github.com/zuzu59/telegraf.git && \
      export dbflux_srv_host={{ lookup('env','dbflux_srv_host') }} && \
      export dbflux_srv_port={{ lookup('env','dbflux_srv_port') }} && \
      export dbflux_u_user={{ lookup('env','dbflux_u_user') }} && \
      export dbflux_p_user={{ lookup('env','dbflux_p_user') }} && \
      /home/awx/telegraf/install_docker_centos.sh || true

      #zzz200716.1427
      # Lance Telegraf au démarrage du container
      RUN sed -i '$ i\/home/awx/telegraf/start_docker.sh' /usr/bin/launch_awx.sh

      #zzz200716.1427
      RUN echo "telegraf install canary200723.1630" >> /canary.txt

      USER 1000
      #zzz200716.1427


- name: "Rebuild {{ awx_web_image_name }} now"
  when: _awx_web_buildconfig is changed
  shell: "oc -n {{ awx_build_namespace }} start-build --wait {{ awx_web_image_name }}"
  delegate_to: localhost

