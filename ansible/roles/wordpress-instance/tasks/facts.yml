# Collect WordPress-specific Ansible facts

# The TL;DR of this charade is that Ansible's set_fact, well, doesn't.
# You do have to go through a fact script on the remote end if you
# want to share facts across the inventory (through
# hostvars[some_hostname]["ansible_facts"]["ansible_local"]). See
# https://medium.com/@jezhalford/ansible-custom-facts-1e1d1bf65db8
- name: Fact directory
  check_mode: no
  # Speed matters here, when running short tasks (with -t) - We don't
  # want (mandatory) facts collection time to dominate the execution
  # time in that case, so we want to populate the whole facts.d
  # directory in a single task.
  shell:
    # Must use undocumented "cmd" parameter to ward off spurious
    # indents that break here-docs - See
    # https://stackoverflow.com/a/40230416/435004
    cmd: |
      set -e -x
      exec 3>&1 >&2

      factsdir="$(mktemp -d "/tmp/wordpress-XXXXXX-facts.d")"
      cleanup_on_error() {
        if [ -n "$factsdir" ]; then rm -rf "$factsdir"; fi
      }
      trap cleanup_on_error EXIT INT QUIT HUP

      make_fact_script() {
        local scriptname
        scriptname="$factsdir/$1.fact"
        (echo "#!/bin/sh"; echo) > "$scriptname"
        cat >> "$scriptname"
        if ! chmod 755 "$scriptname"; then echo "OUCH"; fi
      }

      make_fact_script wp_is_installed <<'WP_INSTALLED_SCRIPT'
      if [ -f "{{ wp_path_config_php }}" ]; then
        echo true
      else
        echo false
      fi
      WP_INSTALLED_SCRIPT

      make_fact_script wp_is_symlinked <<'WP_SYMLINKED_SCRIPT'
      if [ -L "{{ wp_path_wpadmin }}" ]; then
        echo true
      else
        echo false
      fi
      WP_SYMLINKED_SCRIPT

      make_fact_script wp_plugin_list <<'WP_PLUGINS_SCRIPT'
      maybe_json="$(wp --path="{{ wp_dir }}" plugin list --format=json)"
      if echo "$maybe_json" | jq -e . ; then
        exit 0
      else
        case "$?" in
          4) : ;;  # Malformed JSON - Continues below
          *) exit 0 ;;
        esac
      fi

      python3 - <<PYTHON_MALFORMED_JSON

      import json,sys
      bad_json = """$maybe_json"""
      print(json.dumps({
        "_error": "\`wp --path={{ wp_dir }} plugin list --format=json\` produced unparseable JSON",
        "_output_excerpt": bad_json[:160]
      }))
      PYTHON_MALFORMED_JSON

      WP_PLUGINS_SCRIPT

      echo "$factsdir" >&3
      unset factsdir  # So that cleanup_on_error() won't
      # '  # https://github.com/ansible/ansible/issues/28674 - Sad
  register: _facts_dir
  changed_when: false

- setup:
    gather_subset:
      # "Standard" facts are just noise to us.
      # âš  Running `setup` with a limited `gather_subset` won't clean
      # up the fact cache for you, which can be confusing under `-t
      # _debug_facts` - Try `rm -rf ~/.ansible/facts`
      - "!all"
      - "!min"
      - local
    fact_path: "{{ _facts_dir.stdout }}"

############# Debugging support #############################
# Pass `-t facts,_debug_facts` or `-t facts,_debug2_facts` on the
# command line to enable this section

- name: Run fact scripts directly for debug
  when: '"_debug2_facts" in ansible_run_tags'
  shell: |
    set -e -x
    for script in {{ _facts_dir.stdout }}/*.fact; do sh -x $script; done
  register: _run_fact_scripts_directly
  changed_when: false

- name: Result of above (_run_fact_scripts_directly)
  when: '"_debug2_facts" in ansible_run_tags'
  debug:
    msg: "{{ _run_fact_scripts_directly }}"

- name: Debug ansible_facts
  when: >
    "_debug_facts" in ansible_run_tags or
    "_debug2_facts" in ansible_run_tags
  debug:
    msg:
      - '{{ ansible_facts }}'

############# All done, clean up #############################

# That's perhaps a matter of taste but I'd rather have to create and
# clean up all these yadda-yadda-facts.d directories within a few
# seconds, than have them litter the entire serving tree.
- name: Delete fact directory
  check_mode: no
  when: '"_debug2_facts" not in ansible_run_tags'
  file:
    path: "{{ _facts_dir.stdout }}"
    state: absent
  changed_when: false
