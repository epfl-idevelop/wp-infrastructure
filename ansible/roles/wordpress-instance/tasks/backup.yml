# Backup a WordPress instance to EPFL's Scality system through its S3-like API

- assert:
    that: >-
      ansible_verbosity <= 2
    msg: >-
      Don't use -vvv or higher when backing up or restoring sites (risk
      of disclosure of the Scality access credentials)

- include_vars: "{{ item }}"
  with_items:
    - backup-vars.yml
    - ../../../vars/env-secrets.yml                          # Used in backup-vars.yml
    - "../../../vars/secrets-{{ openshift_namespace }}.yml"  # Used in env-secrets.yml

- name: Backup start timestamp to pushgateway
  failed_when: false
  shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      echo restic_start $(date +%s) \
      | curl -X POST -H  "Content-Type: text/plain" --data-binary @- \
            http://pushgateway:9091/metrics/job/backup/instance/{{ inventory_hostname }}

- name: restic init and unlock
  environment: "{{ backup_restic_environment }}"    # `-vv`-safe!
  shell:
    executable: /bin/bash
    cmd: |
      restic -r {{ item }} init
      restic -r {{ item }} unlock
  register: _restic_init
  changed_when: >-
    "created restic repository" in _restic_init.stdout
  failed_when: >-
    not (
      (_restic_init.rc == 0)
      or
      ("already initialized" in _restic_init.stderr)
    )
  ignore_errors: "{{ wp_ignore_backup_errors | default(false) }}"
  with_items:
    - "{{ backup_restic_repo_files }}"
    - "{{ backup_restic_repo_sql }}"

- name: Back up files
  environment: "{{ backup_restic_environment }}"
  shell:
    cmd: |
      cd {{ wp_dir }}
      restic -r {{ backup_restic_repo_files }} backup --json . \
      | jq -s 'last(.[] | select(.message_type == "summary")) '

  ignore_errors: "{{ wp_ignore_backup_errors | default(false) }}"
  register: _restic_backup_files

- name: Back up MySQL database
  environment: "{{ backup_restic_environment }}"
  shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      {{ wp_cli_command }} db export - \
      | restic -r {{ backup_restic_repo_sql }} backup \
            --stdin --stdin-filename db-backup.sql \
            --json \
      | jq -s 'last(.[] | select(.message_type == "summary")) '
  ignore_errors: "{{ wp_ignore_backup_errors | default(false) }}"
  register: _restic_backup_sql

- name: Update tags
  environment: "{{ backup_restic_environment }}"
  when:
    - _restic_backup_files is success
    - _restic_backup_sql   is success
  shell:
    cmd: |
      set -e -x
      date_short="$(date +%Y%m%d)"
      date_full="$(date +%Y%m%d-%H%M%S)"
      restic -r {{ backup_restic_repo_files }} tag \
        --remove latest --remove "$date_short" --remove "$date_full"
      restic -r {{ backup_restic_repo_sql   }} tag \
        --remove latest --remove "$date_short" --remove "$date_full"
      restic -r {{ backup_restic_repo_files }} tag {{ snapshot_id.files }} \
        --add latest --add "$date_short" --add "$date_full"
      restic -r {{ backup_restic_repo_sql   }} tag {{ snapshot_id.sql }} \
        --add latest --add "$date_short" --add "$date_full"
  vars:
    snapshot_id:
      sql:   "{{ (_restic_backup_sql.stdout   | from_json).snapshot_id }}"
      files: "{{ (_restic_backup_files.stdout | from_json).snapshot_id }}"

- name: Collect stats to pushgateway
  environment: "{{ backup_restic_environment }}"
  shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      (
        restic -r {{ backup_restic_repo_files }} stats --json \
        | jq -r '. as $initial_data | keys | map(["restic_s3_" + ., $initial_data[.]]) | .[] | @tsv'
        echo restic_success $(date +%s)
      ) | curl -X POST -H  "Content-Type: text/plain" --data-binary @- \
            http://pushgateway:9091/metrics/job/backup/instance/{{ inventory_hostname }}
