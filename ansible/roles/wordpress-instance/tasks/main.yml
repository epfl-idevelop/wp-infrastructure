# file: roles/wordpress-instance/tasks/main.yml
#
# What to do to install and configure a WordPress instance
#
# Variables:: (in addition to those defined or documented in
#              ../vars/*.yml)


- include_vars: wp-destructive.yml   # For wp_can
  tags: always

- name: WordPress facts
  import_tasks: facts.yml
  tags:
    - facts
    # TODO: configure.yml uses wp_is_symlinked, which requires facts.yml to have run.
    # Can we use a handler instead?
    - config






- name: restore from /backups
  import_tasks: "restore-from-prod.yml"


- name: Serving infrastructure
  when: wp_can.configure
  tags:
    - config
  import_tasks: "serving-infrastructure.yml"

# TODO: À partir d'ici, à garder; avant de livrer, ces tâches doivent
# redevenir fonctionnelles et ne pas contenir de "if" qui ferait de
# wp-int et/ou MiniShift des cas spéciaux.
#
# C'est-à-dire : étant donné un SITE qui fonctionne, après
#
#    wpsible -t symlink -l SITE
#
# il doit être symlinké (c'est-à-dire que son code réside dans le /wp
# de l'image), et continuer à fonctionner. Si ce n'est pas le cas
# c'est un bug (du code préexistant).

- name: Check that WordPress is working
  command: "{{ wp_cli_command }} eval '1;'"
  changed_when: false

- name: "Set up / revert “symlink” serving discipline"
  when:
    - wp_ensure_symlink_version is defined
    - (wp_can.configure and wp_can.write_code) or ansible_check_mode
  tags:
    - never
    - symlink
    - unsymlink
  # Like for backup.yml above, we include_tasks (not import_tasks)
  # here, so as *not* to auto-propagate tags. Tasks within symlink.yml
  # must pay close attention to their tag set (and thus properly
  # segregate the `-t symlink` and `-t unsymlink` use cases)
  include_tasks: "symlink.yml"



- name: Configure
  when: wp_can.configure
  tags:
    - config
  include_tasks:    # Required because of the "when" clause
    file: "configure.yml"
    # Because `include_tasks` is dynamic, tags don't auto-inherit.
    apply:
      tags: ["config"]



- name: Set up plugins
  when: wp_can.configure
  tags:
    - plugins
  include_tasks:
    file: "plugins.yml"
    apply:
      tags: ["plugins"]

- name: Set up themes
  when: wp_can.configure
  tags:
    - themes
  include_tasks:
    file: "themes.yml"
    apply:
      tags: ["themes"]

- name: Convert shortcodes to Gutenberg blocks
  when: wp_use_gutenberg
  include_tasks:
    file: "shortcode-to-block.yml"
    apply:
      tags: ["convert-shortcode-to-block"]
  tags:
    - convert-shortcode-to-block

################################
# Special-purpose tasks
################################

# "Ventilation"-related
- name: "Dump to WXR for ventilation"
  import_tasks: "dump.yml"
  when: not is_minishift_instance
  tags:
    - never
    - dump
- name: "Undump from WXR for ventilation"
  import_tasks: "undump.yml"
  when: not is_minishift_instance
  tags:
    - never
    - undump

- name: CSV plug-in versions report
  when: not is_minishift_instance
  tags:
    - never
    - reportcsv
  run_once: true
  local_action:
    module: copy
    dest: '{{ plugin_report_csv_out }}'
    content: '{{ hostvars | wp_plugin_versions_csv_report }}'

# We could do a with_items but then we would get the entire content
# dumped into the terminal as part of the "items" structure. Oh well
- name: CSV must-use plug-in versions report
  when: not is_minishift_instance
  tags:
    - never
    - reportcsv
  run_once: true
  local_action:
    module: copy
    dest: '{{ muplugin_report_csv_out }}'
    content: '{{ hostvars | wp_muplugin_versions_csv_report }}'




##########################################################################
