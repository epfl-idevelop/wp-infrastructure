# file: roles/wordpress-instance/tasks/main.yml
#
# What to do to install and configure a WordPress instance
#
# Variables:: (in addition to those defined or documented in
#              ../vars/*.yml)

- meta: end_play
  when: |
    not ( ansible_run_tags | any_known_tag(role_path) )

- include_vars: wp-destructive.yml   # For wp_can
  tags: always

- include_vars: ../../../vars/wordpress-vars.yml
  tags: always

- name: Backup
  # We include_tasks (not import_tasks) here, because we do *not* want
  # to propagate tags - Within backup.yml, tasks shall be individually
  # marked with the appropriate subset of the `backup.code`,
  # `backup.data` and `backup.uploads` tags.
  include_tasks: "backup.yml"
  tags:
    - never  # That is, skip unless "-t wipe", "-t backup", "-t backup.code" etc. is
             # passed on the command line
    - wipe
    - backup
    - backup.code
    - backup.data
    - backup.uploads

- name: Wipe
  import_tasks: "wipe.yml"
  tags:
    - never
    - wipe

- wordpress_facts:
  tags: always

- name: "{{ 'Recreate' if 'wipe' in ansible_run_tags else 'Create' }}"
  tags:
    - wp.create
  include_tasks:
    file: "create.yml"
    apply:
      tags: ["wp.create"]

- name: Restore
  import_tasks: "restore.yml"
  tags:
    - never
    - restore

- name: Serving infrastructure
  when: wp_can.configure
  tags:
    - config
  import_tasks: "serving-infrastructure.yml"

- name: Check that WordPress is working
  command: "{{ wp_cli_command }} eval '1;'"
  changed_when: false

- name: "Set up “symlink” serving discipline"
  when:
    - wp_ensure_symlink_version is defined
    - (wp_can.configure and wp_can.write_code) or ansible_check_mode
  tags:
    - never
    - symlink
    - unsymlink
  # Like for backup.yml above, we include_tasks (not import_tasks)
  # here, so as *not* to auto-propagate tags. Tasks within symlink.yml
  # must pay close attention to their tag set (and thus properly
  # segregate the `-t symlink` and `-t unsymlink` use cases)
  include_tasks: "symlink.yml"

- name: Configure
  when: wp_can.configure
  tags:
    - config
  include_tasks:    # Required because of the "when" clause
    file: "configure.yml"
    # Because `include_tasks` is dynamic, tags don't auto-inherit.
    apply:
      tags: ["config"]

- name: Set up plugins
  when: wp_can.configure or ansible_check_mode
  tags:
    - plugins
    - plugins.wp_media_folder_options
    - plugins.unknown
    - plugins.polylang
  include_tasks:
    file: "plugins.yml"
    apply:
      tags: ["plugins"]

- name: Set up themes
  when: wp_can.configure or ansible_check_mode
  tags:
    - themes
  include_tasks:
    file: "themes.yml"
    apply:
      tags: ["themes"]

- name: Get sample page id
  command: "{{ wp_cli_command }} post list --post_type=page --name='sample-page' --format=ids"
  register: _sample_page_id
  changed_when: false
  tags:
    - wp.pages

- name: Delete sample page
  command: "{{ wp_cli_command }} post delete 2 --force"
  when: _sample_page_id.stdout == "2"
  register: _page_delete
  changed_when: >-
    "stdout" in _page_delete and "Success" in _page_delete.stdout
  tags:
    - wp.pages

- name: Get sample post id
  command: "{{ wp_cli_command }} post list --name='hello-world' --format=ids"
  register: _sample_post_id
  changed_when: false
  tags:
    - wp.pages

- name: Delete sample post
  command: "{{ wp_cli_command }} post delete 1 --force"
  when: _sample_post_id.stdout == "1"
  register: _post_delete
  changed_when: >-
    "stdout" in _post_delete and "Success" in _post_delete.stdout
  tags:
    - wp.pages

- name: Set up menus
  include_tasks:
    file: "menus.yml"
    apply:
      tags: ["wp.menus"]
  tags:
    - wp.menus
    - wp.menus.refresh
    - wp.menus.polylang
