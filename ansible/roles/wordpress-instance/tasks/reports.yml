# Read some data from sites and write report from it
- include_vars: reports-vars.yml

- name: Get Wordpress options from site
  command: "{{ wp_cli_command }} {{ item.command_name }}"
  with_items:
    - { command_name: option get blogname }
    - { command_name: option get blogdescription }
    - { command_name: pll lang list --field=name --format=csv }
  register: fetched_options
  changed_when: false
  check_mode: no

- set_fact:
    _wp_base_url_for_report: "{{ wp_base_url }}"

- name: Write collected data to "{{ report_sites_options_filename_relpath }}"
  run_once: true
  local_action:
    module: copy
    dest: "{{ report_sites_options_filename_relpath }}"
    # ansible_play_hosts is the loop variable, so that we only have
    # lines for WordPresses that succeeded on the previous task. In a
    # different template (e.g. JSON) we could also use
    # `ansible_play_hosts_all` to also report on WordPress instances
    # that had an error (e.g. due to unavailable DB)
    content: |
      name,base_url,title,tagline,languages
      {% for host in ansible_play_hosts %}
      {{ host }},{{ hostvars[host]['_wp_base_url_for_report'] }},{{ hostvars[host]['fetched_options'].results[0].stdout }},{{ hostvars[host]['fetched_options'].results[1].stdout }},"{{ hostvars[host]['fetched_options'].results[2].stdout_lines | join(', ') }}"
      {% endfor %}
