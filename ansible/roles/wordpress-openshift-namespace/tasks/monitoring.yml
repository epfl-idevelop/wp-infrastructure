- include_vars: monitoring-vars.yml

- name: Prometheus service
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
      labels:
        app: prometheus
    spec:
      ports:
        - name: traefik
          port: 9999
      selector:
        app: prometheus

- name: Prometheus route (https://prometheus-wwp.epfl.ch/)
  openshift:
    state: latest
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
    spec:
      host: prometheus-wwp.epfl.ch
      port:
        targetPort: traefik
      tls:
        termination: edge
      to:
        kind: Service
        name: prometheus

- name: Prometheus StatefulSet
  openshift:
    state: latest
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
      annotations:
        # https://docs.openshift.com/container-platform/3.11/dev_guide/managing_images.html#image-stream-kubernetes-resources
        image.openshift.io/triggers: >-
          {{ [dict(from=
                     dict(kind="ImageStreamTag",
                          name=monitoring_prober_image_name + ":latest",
                          namespace="wwp"),
                   fieldPath='spec.template.spec.containers[?(@.name=="prober")].image'
                  )] | to_json }}

    spec:
      serviceName: prometheus  # Refs the service above, so that the pods get
                               # a predictable KubeDNS name
      selector:
        matchLabels:
          app: prometheus
      template:
        metadata:
          labels:
            app: prometheus
        spec:
          terminationGracePeriodSeconds: 10
          containers:
            - name: traefik
              image: traefik
              ports:
              - containerPort: 9999
                name: traefik
              volumeMounts:
                - name: traefik-config-static
                  mountPath: /etc/traefik
                - name: traefik-config-dynamic
                  mountPath: /etc/traefik/dynamic
            - name: prometheus
              image: prom/prometheus
#              ports:
#              - containerPort: 9090
#                name: prometheus
              volumeMounts:
                - name: storage
                  mountPath: /prometheus
                - name: dynamic-config
                  mountPath: /prometheus-config/dynamic
                - name: static-config
                  mountPath: /prometheus-config/static
              command:
                - /bin/prometheus
                - --config.file=/prometheus-config/static/prometheus.yml
                - --storage.tsdb.path=/prometheus
                - --query.lookback-delta=15m     # Menu values change slowly
                - --web.console.libraries=/usr/share/prometheus/console_libraries
                - --web.console.templates=/usr/share/prometheus/consoles/prometheus
            - name: configurator
              image: python:3.7-alpine
              volumeMounts:
                - name: dynamic-config
                  mountPath: /prometheus-config/dynamic
                - name: static-config
                  mountPath: /prometheus-config/static
              command:
                    - /usr/bin/env
                    - python3
                    - /prometheus-config/static/prometheus-menu-service-discovery.py
            - name: prober
              # image for this one is obtained by trigger (see
              # above) from the ImageStreamTag
              # This container is otherwise stateless
          volumes:
            - name: storage
              emptyDir: {}  # TODO We probably want some persistence here
            - name: dynamic-config
              emptyDir: {}
            - name: static-config
              configMap:
                name: prometheus
            - name: traefik-config-static
              configMap:
                name: traefik
            - name: traefik-config-dynamic
              configMap:
                name: traefikdyna

- name: Prometheus ConfigMap (configuration and sync scripts)
  openshift:
    state: latest
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: prometheus
      namespace: "{{ openshift_namespace }}"
    data:
      prometheus.yml: >
        {{ lookup("template", "prometheus-config.yml") }}
      prometheus-menu-service-discovery.py: >
        {{ lookup("template", "prometheus-menu-service-discovery.py") }}

- name: Traefik ConfigMap Static (configuration and sync scripts)
  openshift:
    state: latest
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: traefik
      namespace: "{{ openshift_namespace }}"
    data:
      traefik.yml: >
        {{ lookup("template", "traefik-config-static.yml") }}

- name: Traefik ConfigMap Dynamic (configuration and sync scripts)
  openshift:
    state: latest
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: traefikdyna
      namespace: "{{ openshift_namespace }}"
    data:
      basic-auth.yml: >
        {{ lookup("template", "traefik-config-dynamic.yml") }}

- name: "ImageStream/monitoring-menus-probe and BuildConfig/monitoring-menus-probe"
  openshift_imagestream:
    name: "{{ monitoring_prober_image_name }}"
    namespace: "{{ openshift_namespace }}"
    git:
      repository: https://github.com/epfl-si/wp-ops
      ref: "{{ git_current_branch }}"
      path: docker/monitoring-menus-probe
    metadata:
      labels:
        app: prometheus

- name: "Pushgateway service"
  openshift:
    state: latest
    apiVersion: v1
    kind: Service
    metadata:
      name: pushgateway
      namespace: "{{ openshift_namespace }}"
      labels:
        app: pushgateway
    spec:
      ports:
        - name: pushgateway
          port: 9091
      selector:
        app: pushgateway

- name: Pushgateway Deployment config
  openshift:
    state: latest
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: pushgateway
      namespace: "{{ openshift_namespace }}"
    spec:
      replicas: 1
      selector:
        app: pushgateway
      template:
        metadata:
          labels:
            app: pushgateway
        spec:
          containers:
            - name: pushgateway
              image: prom/pushgateway
              ports:
              - containerPort: 9091
                name: pushgateway
      triggers:
      - type: ConfigChange
