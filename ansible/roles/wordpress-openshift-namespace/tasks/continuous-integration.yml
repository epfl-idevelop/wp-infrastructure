# Kubernetes configuration for the continuous integration rig

- include_vars: continuous-integration-vars.yml


# See https://eleanordare.com/blog/2017/6/15/running-cucumber-tests-in-openshift-from-a-jenkins-pipeline
# for help
- name: "Jenkins master ImageStream"
  openshift:
    state: latest
    kind: ImageStream
    name: "{{ ci_jenkins_master_image_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      kind: ImageStream
      apiVersion: v1
      metadata:
        name: "{{ ci_jenkins_master_image_name }}"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: jenkins


- name: Jenkins master image (BuildConfig)
  openshift:
    state: latest
    kind: BuildConfig
    name: "{{ ci_jenkins_master_image_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: build.openshift.io/v1
      kind: BuildConfig
      metadata:
        labels:
          app: jenkins
        name: "{{ ci_jenkins_master_image_name }}"
        namespace: "{{ openshift_namespace }}"
      spec:
        source:
          type: Git
          git:
            uri: 'https://github.com/epfl-idevelop/wp-ops'
            ref: wwp-continuous-integration
          contextDir: docker/jenkins
        strategy:
          type: Docker
          dockerStrategy:
            noCache: true
        output:
          to:
            kind: ImageStreamTag
            name: "{{ ci_jenkins_master_image_stream_tag }}"


# This ImageStream is intended to be picked up by the OpenShift Sync
# Jenkins plug-in (because it has a "role: jenkins-slave" label), then
# passed to the Kubernetes Jenkins plug-in as a so-called "Kubernetes
# plug-in pod template", that the Jenkinsfile can reference (or even
# inheritFrom). See details here:
# https://docs.openshift.com/container-platform/3.11/using_images/other_images/jenkins.html#configuring-the-jenkins-kubernetes-plug-in
# Note that the built-in "nodejs" templates etc. documented on that
# page, don't work (at least for us at EPFL) because they reference a
# Docker image on a nonexistent, non-standard in-cluster Docker
# registry.
- name: Jenkins slaves ImageStream
  openshift:
    state: latest
    kind: ImageStream
    name: "{{ ci_jenkins_slave_imagestream_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      kind: ImageStream
      apiVersion: image.openshift.io/v1
      metadata:
        name: "{{ ci_jenkins_slave_imagestream_name }}"
        namespace: "{{ openshift_namespace }}"
        labels:
          role: jenkins-slave
      spec:
        tags:
        - name: latest
          from:
            kind: DockerImage
            name: "{{ ci_jenkins_slave_docker_image }}"


- name: Jenkins services
  with_items:
    - name: jenkins
      portName: web
      servicePort: 80
      targetPort: 8080
    - name: jenkins-jnlp
      portName: agent
      servicePort: 5000
      targetPort: 5000
  openshift:
    state: latest
    kind: Service
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ item.name }}
        namespace: "{{ openshift_namespace }}"
        labels:
          app: jenkins
      spec:
        type: ClusterIP
        ports:
          - name: {{ item.portName }}
            port: {{ item.servicePort }}
            protocol: TCP
            targetPort: {{ item.targetPort }}
        selector:
          app: jenkins
          deploymentconfig: jenkins


- name: PersistentVolumeClaim/"{{ ci_jenkins_persistent_volume_claim_name }}"
  openshift:
    state: latest
    kind: PersistentVolumeClaim
    name: "{{ ci_jenkins_persistent_volume_claim_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app: jenkins
        name: "{{ ci_jenkins_persistent_volume_claim_name }}"
        namespace: wwp-test
      spec:
        volumeName: "{{ ci_jenkins_persistent_volume_name }}"
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi


- name: Jenkins master (DeploymentConfig)
  openshift:
    state: latest
    kind: DeploymentConfig
    name: jenkins
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: DeploymentConfig
      metadata:
        labels:
          app: jenkins
        name: jenkins
        namespace: "{{ openshift_namespace }}"
      spec:
        replicas: 1
        selector:
          app: jenkins
          deploymentconfig: jenkins
        template:
          metadata:
            labels:
              app: jenkins
              deploymentconfig: jenkins
              jenkins: master
          spec:
            containers:
              - name: jenkins
                env:
                - name: OPENSHIFT_ENABLE_OAUTH
                  value: "true"
                - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
                  value: "true"
                - name: DISABLE_ADMINISTRATIVE_MONITORS
                  value: "false"
                - name: KUBERNETES_MASTER
                  value: https://kubernetes.default:443
                - name: KUBERNETES_TRUST_CERTIFICATES
                  value: "true"
                - name: JENKINS_SERVICE_NAME
                  value: jenkins
                - name: JNLP_SERVICE_NAME
                  value: jenkins-jnlp
                # "image" gets set thanks to triggers â†’ ImageChange, below
                imagePullPolicy: IfNotPresent
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /login
                    port: 8080
                    scheme: HTTP
                  initialDelaySeconds: 3
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 240
                livenessProbe:
                  failureThreshold: 2
                  httpGet:
                    path: /login
                    port: 8080
                    scheme: HTTP
                  initialDelaySeconds: 420
                  periodSeconds: 360
                  successThreshold: 1
                  timeoutSeconds: 240
                resources:
                  limits:
                    memory: 512Mi
                volumeMounts:
                - mountPath: /var/lib/jenkins
                  name: jenkins-data
            securityContext: {}
            serviceAccount: jenkins
            serviceAccountName: jenkins
            volumes:
            - name: jenkins-data
              persistentVolumeClaim:
                claimName: "{{ ci_jenkins_persistent_volume_claim_name }}"
        triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
            - jenkins
            from:
              kind: ImageStreamTag
              name: "{{ ci_jenkins_master_image_stream_tag }}"
              namespace: "{{ openshift_namespace }}"


- name: Jenkins pipeline (BuildConfig)
  openshift:
    state: latest
    kind: BuildConfig
    name: "{{ ci_buildconfig_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: BuildConfig
      metadata:
        labels:
          app: jenkins
        name: "{{ ci_buildconfig_name }}"
        namespace: "{{ openshift_namespace }}"
      spec:
        strategy:
          jenkinsPipelineStrategy:
            jenkinsfile: |
              {{ lookup("template", "Jenkinsfile") | indent(width=8) }}
              {# Indent width is relative to the outermost ": |" construct,
               # i.e. the "a" of "apiVersion" #}


- name: Jenkins route
  openshift:
    state: latest
    kind: Route
    name: jenkins
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: jenkins
        namespace: "{{ openshift_namespace }}"
        labels:
          app: jenkins
      spec:
        host: "{{ ci_jenkins_public_hostname }}"
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        to:
          kind: Service
          name: jenkins

