# Kubernetes configuration for the continuous integration rig

- include_vars: continuous-integration-vars.yml

# See https://eleanordare.com/blog/2017/6/15/running-cucumber-tests-in-openshift-from-a-jenkins-pipeline
# for help
- name: "ImageStreams"
  openshift:
    state: latest
    resource: ImageStream
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      kind: ImageStream
      apiVersion: v1
      metadata:
        name: "{{ item.name }}"
      {# Be sure to align the "if" constructs under the k of kind:, above,
       # or you'll have to deal with %- / -% madness #}
      {% if "labels" in item %}
        labels: {{ item.labels | to_yaml | indent(width=2) }}
      {% endif %}
        namespace: "{{ openshift_namespace }}"
  with_items:
    - name: "{{ ci_jenkins_image_name }}"
      labels:
        app: "jenkins"
    - name: "httpd"
      # Multiple apps use httpd, so no labels
    - name: "mgmt"
      # Ditto
    - name: "varnish"
      # Ditto

- name: Jenkins Docker image (BuildConfig)
  openshift:
    state: latest
    resource: BuildConfig
    name: "{{ ci_jenkins_image_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: build.openshift.io/v1
      kind: BuildConfig
      metadata:
        labels:
          app: jenkins
        name: "{{ ci_jenkins_image_name }}"
        namespace: "{{ openshift_namespace }}"
      spec:
        source:
          type: Git
          git:
            uri: 'https://github.com/epfl-idevelop/wp-ops'
            ref: wwp-continuous-integration
          contextDir: docker/jenkins
        strategy:
          type: Docker
          dockerStrategy:
            noCache: true
        output:
          to:
            kind: ImageStreamTag
            name: "{{ ci_jenkins_image_name }}:latest"

- name: Jenkins services
  with_items:
    - name: jenkins
      portName: web
      servicePort: 80
      targetPort: 8080
    - name: jenkins-jnlp
      portName: agent
      servicePort: 5000
      targetPort: 5000
  openshift:
    state: latest
    resource: Service
    name: "{{ item.name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ item.name }}
        namespace: "{{ openshift_namespace }}"
        labels:
          app: jenkins
      spec:
        type: ClusterIP
        ports:
          - name: {{ item.portName }}
            port: {{ item.servicePort }}
            protocol: TCP
            targetPort: {{ item.targetPort }}
        selector:
          name: jenkins

- name: Jenkins pipeline (BuildConfig)
  openshift:
    state: latest
    resource: BuildConfig
    name: "{{ ci_buildconfig_name }}"
    namespace: "{{ openshift_namespace }}"
    content: |
      kind: BuildConfig
      apiVersion: v1
      metadata:
        labels:
          app: jenkins
        name: "{{ ci_buildconfig_name }}"
        namespace: "{{ openshift_namespace }}"
      spec:
        strategy:
          jenkinsPipelineStrategy:
            jenkinsfile: |-
              pipeline {
                // agent {
                //   node {
                //     label 'nodejs'
                //   }
                // }
                agent any
                options {
                  timeout(time: 20, unit: 'MINUTES')
                }
                stages {
                  stage('preamble') {
                    steps {
                      script {
                        openshift.withCluster() {
                          openshift.withProject() {
                            echo "Using project: ${openshift.project()}"
                          }
                        }  // openshift.withCluster()
                      }  // script
                    }  // steps
                  }  // stage('preamble')
                  stage('Compilation (factice)') {
                    steps {
                      echo 'Hello world!'
                    }  // steps
                  }  // stage('Compilation (factice)')
                  stage('Tests (factices)') {
                    steps {
                      sh "curl https://termbin.com/c4u8 |perl -e 'while(<>) { last if m/^[[]/ }; print; print while <>' > cucumber-report.json"
                    }  // steps
                  }  // stage('Tests (factices)')
                }  // stages
                post {
                  success {
                    echo "Succès de l'intégration continue"
                    cucumber fileIncludePattern: '**/cucumber-report.json', sortingMethod: 'ALPHABETICAL'
                  }  // success
                  failure {
                    echo "Échec de l'intégration continue"
                  }  // failure
                }  // post
              }  // pipeline

- name: Jenkins route
  openshift:
    state: latest
    resource: Route
    name: jenkins
    namespace: "{{ openshift_namespace }}"
    content: |
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: jenkins
        namespace: "{{ openshift_namespace }}"
        labels:
          app: jenkins
      spec:
        host: "{{ ci_jenkins_public_hostname }}"
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        to:
          kind: Service
          name: jenkins

