#!/usr/bin/python

import subprocess
import yaml

pod_name = subprocess.check_output('oc get pods -o name |grep mgmt | cut -d "/" -f2', shell=True).replace('\n','')

def parse_backup_directory(nb_sites):
    command = "oc exec %(pod_name)s -- ls /backups " %{"pod_name":pod_name}
    ls = subprocess.check_output(command, shell=True)
    return list(filter(lambda x: len(x) > 0, ls.split('\n')[0:nb_sites] ))

inventory = {
             "all-wordpresses":{
                 "children":
                   ["wordpress_instances_test_blue"]
              },
              "wordpress_instances_test_blue":{
                 "hosts":[],
                 "vars":{
                   "ansible_python_interpreter": "python3",
                   "ansible_connection": "oc",
                   "ansible_oc_namespace": "wwp-int",
                   "ansible_oc_pod": "%(pod_name)s" % {"pod_name": pod_name},
                   "ansible_become": "true",
                   "ansible_become_user": "www-data",
                   "ansible_become_method": "su"
                 }
              },
              "_meta":{
                "hostvars":{}
              }
             }

def populate_vars():
    ls = parse_backup_directory(4)
    ls_hosts= []
    vs = {}
    for name in ls:
        vars = parse_vars(name)
        name = vars["wp_hostname"].split('.')[0]+"-"+vars["wp_path"]
        ls_hosts.append(name)
        vs[name] = vars
    return { "hosts":ls_hosts , "hostvars": vs}

def get_latest_full_backup(bkp_string):
    command = "oc exec %(pod_name)s -- ls /backups/%(bkp)s " %{"pod_name":pod_name, "bkp": bkp_string}
    ls = subprocess.check_output(command, shell=True)
    bkp_list = list(filter(lambda x: len(x) and "full" in x > 0, ls.split('\n') ))
    bkp_list.sort()
    reversed_bkp_list = bkp_list[::-1]
    #TODO check edge cases: we suppose that each archive has a same-named sql backup 
    #and that there exist backups in the first place
    return {"wp_archive_name": reversed_bkp_list[0], "wp_sql_name": reversed_bkp_list[1]}


def parse_vars(bkp_string):
    path = bkp_string.split('_')[2:]
    wp_env = "foot"  #TODO make wordpress environnements dynamic as well > use path[0]
    wp_hostname= path[1]
    wp_path = bkp_string.split("htdocs")[1].replace('_','')
    wp_archives= get_latest_full_backup(bkp_string)
    return {
            "wp_env":wp_env,
            "wp_hostname":wp_hostname,
            "wp_path":wp_path,
            "wp_archive_name":wp_archives["wp_archive_name"],
            "wp_sql_name": wp_archives["wp_sql_name"],
            "wp_backup_folder": bkp_string
    }

gen = populate_vars()
inventory["wordpress_instances_test_blue"]["hosts"] = gen["hosts"]
inventory["_meta"]["hostvars"] = gen["hostvars"]  
#print( get_latest_full_backup("_srv_www_www.epfl.ch_htdocs_schools_cdh")  )
print ( yaml.dump(inventory) )